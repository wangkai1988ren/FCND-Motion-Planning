import numpy as np
#dd = np.loadtxt('colliders.csv', usecols=0, delimiter=' ', dtype='String')
#dd = np.loadtxt('colliders.csv',  dtype='str',delimiter=',')
#dtype={'names': ('head', 'data'),'formats': ('S', 'f')},
import matplotlib.pyplot as plt
from planning_utils import create_grid, pick_uncrossed,cross
from bresenham import bresenham
'''
dd = np.array([0,0])
lat0 = 0.0
lon0 = 0.0
with open('colliders.csv','r') as f:
    lines=f.readlines()
    #dd = np.loadtxt(lines[0], usecols=(1,3), delimiter=', ', dtype='float')
    head = lines[0]
    half_h = head.split(',')
    lat0 = float(half_h[0].strip().split(' ')[1])
    lon0 = float(half_h[1].strip().split(' ')[1])
    print(lat0)
    print(lon0)

    print(lat0+lon0)
'''
    #cc = np.loadtxt(lines[0])

    #for i in range(2):
        #print(lines[i])#打印文件前2行内容
'''
a = np.array([0, 1, 2])
a.append(3)
print(a)
'''

'''
data = np.loadtxt('colliders.csv', delimiter=',', dtype='Float64', skiprows=2)
TARGET_ALTITUDE = 15
SAFETY_DISTANCE = 1
grid, north_offset, east_offset = create_grid(data, TARGET_ALTITUDE, SAFETY_DISTANCE)

plt.imshow(grid, cmap='Greys', origin='lower')
'''
'''
import matplotlib.pyplot as plt
labels='frogs','hogs','dogs','logs'
sizes=15,20,45,10
colors='yellowgreen','gold','lightskyblue','lightcoral'
explode=0,0.1,0,0
plt.pie(sizes,explode=explode,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True,startangle=50)
plt.axis('equal')
plt.show()
'''

'''
a  = [0,1,2,4,8,16]
print(a)
#a.remove(3)
a.pop([3:1:5])
print(a)
...
'''

'''
L1 = [1, 2, 3, 4, 5]
L2 = [20, 30, 40]
L1[len(L1):len(L1)]= L2
w = L1
print(L1)
print(w)
print(w[1:len(w)+1])
L1.extend(L2)
L1
[1, 2, 3, 4, 5, 20, 30, 40]
a = [1,23]
b = [4,56]
c = a.extend(b)
print(a.extend(b))
for i in range(1,10,1):
    print(i)
'''
'''
grid = np.array([[0,0,0,0],
            [0,1,1,0],
            [0,1,1,0],
            [0,0,0,0]])'''

#path=[(0,0),(1,0),(3,0),(3,1),(3,3)]
data = np.loadtxt('colliders.csv', delimiter=',', dtype='Float64', skiprows=2)

# Define a grid for a particular altitude and safety margin around obstacles
grid, north_offset, east_offset = create_grid(data,5, 5)
'''path=[(316, 445), (379, 445), (380, 444), (381, 444), (382, 443), (384, 443), (385, 442), (386, 442), (387, 441), (388, 441), (389, 440), (390, 440), (391, 439), (392, 439), (393, 438), (395, 438), (396, 437), (397, 437), (398, 436), (399, 436), (400, 435), (401, 435), (402, 434), (403, 434), (404, 433), (406, 433), (407, 432), (408, 432), (409, 431), (410, 431), (411, 430), (412, 430), (413, 429), (414, 429), (415, 428), (417, 428), (418, 427), (419, 427), (420, 426), (421, 426), (422, 425), (423, 425), (424, 424), (425, 424), (426, 423), (427, 423)]
'''
path=[(316, 445), (317, 446), (318, 447), (319, 448), (320, 449), (321, 450), (322, 451), (323, 452), (324, 453), (325, 454), (326, 455), (327, 456), (328, 457), (329, 458), (330, 459), (331, 460), (332, 461), (333, 462), (334, 463), (335, 464), (336, 465), (337, 466), (338, 467), (339, 468), (340, 469), (341, 470), (342, 471), (343, 472), (344, 473), (345, 474), (346, 475), (347, 476), (348, 477), (349, 478), (350, 479), (351, 480), (352, 481), (353, 482), (354, 483), (355, 484), (356, 485), (357, 486), (358, 487), (359, 488), (360, 489), (361, 490), (362, 491), (363, 492), (364, 493), (365, 494), (366, 495), (367, 496), (368, 497), (369, 498), (370, 499), (371, 500), (372, 501), (373, 502), (374, 503), (375, 504), (376, 505), (377, 506), (378, 507), (379, 508), (380, 509), (381, 509), (382, 510), (383, 510), (384, 511), (385, 511), (386, 512), (387, 512), (388, 513), (389, 513), (390, 513), (391, 514), (392, 514), (393, 515), (394, 515), (395, 516), (396, 517), (397, 518), (398, 519), (399, 520), (400, 521), (401, 522), (402, 523), (403, 524), (404, 525), (405, 526), (406, 527), (407, 528), (408, 529), (409, 530), (410, 531), (411, 532), (412, 533), (413, 534), (414, 535), (415, 536), (416, 537), (417, 538), (418, 539), (419, 540), (420, 541), (421, 542), (422, 543), (423, 544), (424, 545), (425, 546), (426, 547), (427, 548), (428, 549), (429, 550), (430, 551), (431, 552), (432, 553), (433, 554), (434, 555), (435, 556), (436, 557), (437, 558), (438, 559), (439, 560), (440, 561), (441, 562), (442, 563), (443, 564), (444, 565), (445, 566), (446, 567), (447, 568), (448, 569), (449, 570), (450, 571), (451, 572), (452, 573), (453, 574), (454, 575), (455, 576), (456, 577), (457, 578), (458, 579), (459, 580), (460, 581), (461, 582), (462, 583), (463, 584), (464, 585), (465, 586), (466, 587), (467, 588), (468, 589), (469, 590), (470, 591), (471, 592), (472, 593), (473, 594), (474, 595), (475, 596), (476, 597), (477, 598), (478, 599), (479, 600), (480, 601), (481, 602), (482, 603), (483, 604), (484, 605), (485, 606), (486, 607), (487, 608), (488, 609), (489, 610), (490, 611), (491, 612), (492, 613), (493, 614), (494, 615), (495, 616), (496, 617), (497, 618), (498, 619), (499, 620), (500, 621), (501, 622), (502, 623), (503, 624), (504, 625), (505, 626), (506, 627), (507, 628), (508, 629), (509, 630), (510, 631), (511, 632), (512, 633), (513, 634), (514, 635), (515, 636), (516, 637), (517, 638), (518, 639), (519, 640), (520, 641), (521, 642), (522, 643), (523, 644), (524, 645), (525, 646), (526, 647), (527, 648), (528, 649), (529, 650), (530, 651), (531, 652), (532, 653), (533, 654), (534, 655), (535, 656), (536, 657), (537, 658), (538, 659), (539, 660), (540, 661), (541, 662), (542, 663), (543, 664), (544, 665), (545, 666), (546, 667), (547, 668), (548, 669), (549, 670), (550, 671), (551, 672), (552, 673), (553, 674), (554, 675), (555, 676), (556, 677), (557, 678), (558, 679), (559, 680), (560, 681), (561, 682), (562, 683), (563, 684), (564, 685), (565, 686), (566, 687), (567, 688), (568, 689), (569, 690), (570, 691), (571, 692), (572, 693), (573, 694), (574, 695), (575, 696), (576, 697), (577, 698), (578, 699), (579, 700), (580, 701), (581, 702), (582, 703), (583, 704), (584, 705), (585, 706), (586, 707), (587, 708), (588, 709), (589, 710), (590, 711), (591, 712), (592, 713), (593, 714), (594, 715), (595, 716), (596, 716), (597, 716), (598, 716), (599, 716), (600, 716), (601, 716), (602, 716), (603, 716), (604, 716), (605, 716), (606, 716), (607, 716), (608, 716), (609, 716), (610, 716), (611, 716), (612, 716), (613, 716), (614, 716), (615, 716), (616, 716), (617, 716), (618, 716), (619, 716), (620, 716), (621, 716), (622, 716), (623, 716), (624, 716), (625, 716), (626, 716), (627, 716), (628, 716), (629, 716), (630, 716), (631, 716), (632, 716), (633, 716), (634, 716), (635, 716), (636, 716), (637, 716), (638, 716), (639, 716), (640, 716), (641, 716), (642, 716), (643, 716), (644, 716), (645, 716), (646, 716), (647, 716), (648, 716), (649, 716), (650, 716), (651, 716), (652, 716), (653, 716), (654, 716), (655, 716), (656, 716), (657, 716), (658, 716), (659, 716), (660, 716), (661, 716), (662, 716), (663, 716), (664, 716), (665, 716), (666, 716), (667, 716), (668, 716), (669, 716), (670, 716), (671, 716), (672, 716), (673, 716), (674, 716), (675, 716), (676, 716), (677, 716), (678, 716), (679, 716), (680, 716), (681, 716), (682, 716), (683, 716), (684, 716), (685, 716), (686, 716), (687, 716), (688, 716), (689, 716), (690, 716), (691, 716), (692, 716), (693, 716), (694, 716), (695, 716), (696, 716), (697, 716), (698, 716), (699, 716), (700, 716), (701, 716), (702, 716), (703, 716), (704, 716), (705, 716), (706, 716), (707, 716), (708, 716), (709, 716), (710, 716), (711, 716), (712, 716), (713, 716), (714, 716), (715, 716), (716, 716), (717, 716), (718, 716), (719, 716), (720, 716), (721, 716), (722, 716), (723, 716), (724, 716), (725, 716), (726, 716), (727, 716), (728, 716), (729, 716), (730, 716), (731, 716), (732, 716), (733, 716), (734, 716), (735, 716), (736, 716), (737, 716), (738, 716), (739, 716), (740, 716), (741, 716), (742, 716), (743, 716), (744, 716), (745, 716), (746, 716), (747, 716), (748, 716), (749, 716), (750, 716), (751, 716), (752, 716), (753, 716), (754, 716), (755, 716), (756, 716), (757, 716), (758, 716), (759, 716), (760, 716), (761, 716), (762, 716), (763, 716), (764, 716), (765, 716), (766, 715), (767, 715), (768, 715), (769, 714), (770, 714), (771, 713), (772, 713), (773, 712), (774, 712), (775, 711), (776, 711), (777, 710), (778, 710), (779, 710), (780, 709), (781, 709), (782, 708), (783, 708), (784, 707), (785, 707), (786, 706), (787, 706), (788, 705), (789, 705), (790, 705), (791, 704), (792, 704), (793, 703), (794, 703), (795, 702), (796, 702), (797, 701), (798, 701), (799, 700), (800, 700)]


#cells = list(bresenham(path[0][0],path[0][1],path[-1][0], path[-1][1]))
#print(grid)
#print(path)
#print(cells)
print(cross(grid,path[0],path[-1]))
print(cross(grid,(0,0),(3,0)))

pathb = pick_uncrossed(grid,path)
pathc = pick_uncrossed(grid,pathb)
print(pathb)
print(pathc)
print(len(path))
print(len(pathb))
print(len(pathc))

plt.imshow(grid, cmap='Greys', origin='lower')
# For the purposes of the visual the east coordinate lay along
# the x-axis and the north coordinates long the y-axis.

#print(path)
if path is not None:
    pp = np.array(path)
    plt.plot(pp[:, 1], pp[:, 0], 'g')
if pathb is not None:
    pp = np.array(pathb)
    plt.plot(pp[:, 1], pp[:, 0], 'r')
if pathc is not None:
    pp = np.array(pathc)
    plt.plot(pp[:, 1], pp[:, 0], 'y')
plt.xlabel('EAST')
plt.ylabel('NORTH')
plt.show()
